import Head from "next/head";
import { useState, useEffect } from "react";
import { GetStaticProps } from "next";
import React from "react";
import axios from "axios";
import { setCookie } from "cookies-next";
import { useRouter } from "next/router";


export const getStaticProps: GetStaticProps = async (context) => {
  const color1 = "#FCF9F8"
  const color2 = "#2A292C"
  const color3 = "#2288E3"
  const color4 = "#99A6B4"
  const border = "10px"
  
  return {
    revalidate: 60 * 6,
    props: {
      color1,
      color2,
      color3,
      color4,
      border
    },
  };
};

interface PageProps {
  color1: string;
  color2: string;
  color3: string;
  color4: string;
  border: string;
}

export default function Home(props: PageProps) {
  const inputChangeHandler = (e: React.SyntheticEvent) => {
    const inputElement = e.target as HTMLInputElement;
    if (inputElement.name === "name") setUsername(inputElement.value);
    if (inputElement.name === "email") setEmail(inputElement.value);
    if (inputElement.name === "password") setPassword(inputElement.value);
    if (inputElement.name === "isAdmin") setIsAdmin(!!Number(inputElement.value));
  };

  const router = useRouter()
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isLogin, setIsLogin] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false);
  const [failedAttemps, setFailedAttemps] = useState(0);

  const resTokenToCookie = (TokenCookie: string) => {
    setCookie("loggedAs", TokenCookie, {
      expires: new Date(Date.now() + 1 * 1000 * 60 * 60 * 24 * 7),
    });
  };

  type postProps = {
    username?: string;
    email: string;
    password: string;
    isAdmin?: boolean;
  };

  const authPost = async (url: string, props: postProps) => {
    try {
      const res = await axios.post(url, props);

      const TokenCookie = res.data.msg;
      resTokenToCookie(TokenCookie);
    } catch (err: any) {
      console.error(err.message);
      setFailedAttemps(failedAttemps + 1);
      return
    }
    setTimeout(router.reload, 20);
  };


  const formSubmitHandler = async (e: React.SyntheticEvent) => {
    e.preventDefault();
      if (isLogin) {
        await authPost("http://localhost:3000/api/login", {
          email: email.toLowerCase(),
          password,
        });
      } else {
        await authPost("http://localhost:3000/api/signup", {
          email: email.toLowerCase(),
          password,
          username,
          isAdmin,
        });
      }
  };

  return (
    
    <>
      <Head>
        <title>Welcome</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      
    </>
  );
}
